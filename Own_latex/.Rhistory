for (b in 1:B){
#s=sample(1:n,n,replace=T);
#Tbst[b]=;
for (i in 1:n){p[b,i]=mean((X[s]==X[i]))};
}
pstar=apply(p,2,mean);
return(mean(Tbst)
- weighted.mean((X-weighted.mean(X,pstar))^2,pstar))
};
varemp=function(x){
n=length(X);
res=(n-1)*var(X)/n
return(res)
}
X=rnorm(10,0,1)
B=1000
varemp=function(x){
n=length(x);
res=(n-1)*var(x)/n;
return(res)
}
bootstrap_ech=function(ech){
u=sample(1:length(ech), length(ech), replace = TRUE)
B_ech=ech[u]
return(B_ech)
}
biaisbstA=function(B,X){
n=length(X);
matrix_Bech=replicate(B,bootstrap_ech(X));
Tbst=apply(matrix_Bech,1,varemp);
p=matrix(0,nr=B,nc=n);
for (b in 1:B){
#s=sample(1:n,n,replace=T);
#Tbst[b]=;
for (i in 1:n){p[b,i]=mean((X[s]==X[i]))};
}
pstar=apply(p,2,mean);
return(mean(Tbst)
- weighted.mean((X-weighted.mean(X,pstar))^2,pstar))
};
varemp=function(x){
n=length(x);
res=(n-1)*var(x)/n;
return(res)
}
n=length(X);
matrix_Bech=replicate(B,bootstrap_ech(X));
Tbst=apply(matrix_Bech,1,varemp);
p=matrix(0,nr=B,nc=n);
bootstrap_ech=function(ech){
u=sample(1:length(ech), length(ech), replace = TRUE)
B_ech=ech[u]
return(B_ech,p)
}
n=length(X);
matrix_Bech=replicate(B,bootstrap_ech(X));
return([B_ech,p])
bootstrap_ech=function(ech){
u=sample(1:length(ech), length(ech), replace = TRUE)
B_ech=ech[u]
return([B_ech,p])
}
n=length(X);
matrix_Bech=replicate(B,bootstrap_ech(X));
bootstrap_ech=function(ech){
u=sample(1:length(ech), length(ech), replace = TRUE)
B_ech=ech[u]
return(list("Bech"=B_ech,'p'=p])
}
biaisbstA=function(B,X){
n=length(X);
matrix_Bech=replicate(B,bootstrap_ech(X));
Tbst=apply(matrix_Bech,1,varemp);
p=matrix(0,nr=B,nc=n);
for (b in 1:B){
#s=sample(1:n,n,replace=T);
#Tbst[b]=;
for (i in 1:n){p[b,i]=mean((X[s]==X[i]))};
}
pstar=apply(p,2,mean);
return(mean(Tbst)
- weighted.mean((X-weighted.mean(X,pstar))^2,pstar))
};
varemp=function(x){
n=length(x);
res=(n-1)*var(x)/n;
return(res)
}
X=rnorm(10,0,1)
B=1000
biaisbstA(B,X)
bootstrap_ech=function(ech){
u=sample(1:length(ech), length(ech), replace = TRUE)
B_ech=ech[u]
return(list("Bech"=B_ech,'p'=p]))
}
bootstrap_ech=function(ech){
u=sample(1:length(ech), length(ech), replace = TRUE)
B_ech=ech[u]
return(list("Bech"=B_ech,'p'=p))
}
biaisbstA=function(B,X){
n=length(X);
matrix_Bech=replicate(B,bootstrap_ech(X));
Tbst=apply(matrix_Bech,1,varemp);
p=matrix(0,nr=B,nc=n);
for (b in 1:B){
#s=sample(1:n,n,replace=T);
#Tbst[b]=;
for (i in 1:n){p[b,i]=mean((X[s]==X[i]))};
}
pstar=apply(p,2,mean);
return(mean(Tbst)
- weighted.mean((X-weighted.mean(X,pstar))^2,pstar))
};
n=length(X);
matrix_Bech=replicate(B,bootstrap_ech(X));
n=length(X);
matrix_Bech=replicate(B,bootstrap_ech(X)$Bech);
n=length(X);
matrix_Bech=replicate(B,bootstrap_ech(X)$Bech);
Tbst=apply(matrix_Bech,1,varemp);
p=bootstrap_ech(X)$p;
p=bootstrap_ech(X)$p;
p=bootstrap_ech(X)$p;
n=length(X);
matrix_Bech=replicate(B,bootstrap_ech(X)$Bech);
Tbst=apply(matrix_Bech,1,varemp);
p=bootstrap_ech(X)$p;
bootstrap_ech=function(ech){
u=sample(1:length(ech), length(ech), replace = TRUE)
B_ech=ech[u]
p=000
return(list("Bech"=B_ech,'p'=p))
}
n=length(X);
matrix_Bech=replicate(B,bootstrap_ech(X)$Bech);
Tbst=apply(matrix_Bech,1,varemp);
p=bootstrap_ech(X)$p;
knitr::opts_chunk$set(echo = TRUE)
#  Fonction de création d'un échantillon bootstrap
bootstrap_ech=function(ech){
u=sample(1:length(ech), length(ech), replace = TRUE)
B_ech=ech[u]
return(B_ech)
}
bootstrap= function(ech_start,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique VARIANCE sur chaque B_ech
Tbst=apply(matrix_Bech,1,mean)
mu_star=mean(bootstraped_stat)
mean((Tbst-mu_star)^2)
}
bootstrap= function(ech_start,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_Bech,1,mean)
mu_star=mean(bootstraped_stat)
res=mean((Tbst-mu_star)^2)
return(res)
}
N=100
X=rnorm(N)
bootstrap(X)
bootstrap(X,100)
N=100
X=rnorm(N)
bootstrap(X,100)
#  Fonction de création d'un échantillon bootstrap
bootstrap_ech=function(ech){
u=sample(1:length(ech), length(ech), replace = TRUE)
B_ech=ech[u]
return(B_ech)
}
bootstrap= function(ech_start,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_Bech,1,mean)
mu_star=mean(bootstraped_stat)
res=mean((Tbst-mu_star)^2)
return(res)
}
bootstrap= function(x,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_Bech,1,mean)
mu_star=mean(bootstraped_stat)
res=mean((Tbst-mu_star)^2)
return(res)
}
N=100
X=rnorm(N)
bootstrap(X,100)
bootstrap= function(x,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_ech,1,mean)
mu_star=mean(bootstraped_stat)
res=mean((Tbst-mu_star)^2)
return(res)
}
N=100
X=rnorm(N)
bootstrap(X,100)
bootstrap(X,100)
bootstrap= function(x,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_ech,1,mean)
mu_star=mean(Tbst)
res=mean((Tbst-mu_star)^2)
return(res)
}
N=100
X=rnorm(N)
bootstrap(X,100)
X=rnorm(N)
bootstrap(X,100)
N=100
X=rnorm(N)
bootstrap(X,100)
N=100
X=rnorm(N)
bootstrap(X,100)
N=100
X=rnorm(N)
L=seq(1,200)
vect_estimation=c()
bootstrap= function(x,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_ech,1,mean)
mu_star=mean(Tbst)
res=mean((Tbst-mu_star)^2)
return(res)
}
N=100
X=rnorm(N)
L=seq(1,200)
vect_estimation=c()
for(i in L){
Estimation=bootstrap(X,i)
vect_estimation=c(vect_estimation,Estimation)
}
plot(L,Estimation, cex=0.5)
vect_estimation=c()
for(i in L){
Estimation=bootstrap(X,i)
vect_estimation=c(vect_estimation,Estimation)
}
for(i in L){
vect_estimation=c(vect_estimation,bootstrap(X,i))
}
for(i in L){
vect_estimation=c(vect_estimation,bootstrap(X,i))
}
vect_estimation=c()
N=100
X=rnorm(N)
L=seq(1,200)
vect_estimation=c()
for(i in L){
vect_estimation=c(vect_estimation,bootstrap(X,i))
}
plot(L,Estimation, cex=0.5)
plot(L,vect_estimation, cex=0.5)
res=(Tbst-mu_star)^2
matrix_ech=replicate(L,bootstrap_ech(x))
Library(boot)
lib(boot)
?library
library(boot)
install.packages("boot")
library(boot)
bigcity
bigcity
data=bigcity
?median
?sort
sort(data)
plot(data)
data=data$u-data$x
plot(data)
data=data$x-data$u
plot(data)
data=data$x-data$u
library(boot)
data=bigcity
data=data$x-data$u
plot(data)
sort(data)
sort(data)[length(data)/2+1]
sorted=sort(data)
sorted[length(data)/2+1]
sorted
length(data)
sorted[length(data)+1]
sorted[length(data)+1/2]
sorted
length(data)
length(data)
length(data)+1
length(data)+1/2
sorted[(length(data)+1)/2]
length(data)+1/2
sorted
(length(data)+1)/2
sorted[(length(data)+1)/2]
data=data$x-data$u
sorted=sort(data)
sorted[(length(data)+1)/2]
plot(data)
median(data)
median(data)
median(data)
?var
varemp=function(x){(length(x)-1)*var(x)/length(x)}
bootstrap_biais= function(ech_start,L){
bootstraped_stat=c()
matrix_Bech=replicate(L,bootstrap_ech(x))
#calcul de la statistique VARIANCE sur chaque B_ech
bootstraped_stat=apply(matrix_Bech,1,median)
res=mean(bootstraped_stat)-median(ech_start)
}
varemp=function(x){(length(x)-1)*var(x)/length(x)}
bootstrap_biais= function(x,L){
bootstraped_stat=c()
matrix_Bech=replicate(L,bootstrap_ech(x))
#calcul de la statistique VARIANCE sur chaque B_ech
bootstraped_stat=apply(matrix_Bech,1,median)
res=mean(bootstraped_stat)-median(x)
}
bootstrap_var= function(x,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_ech,1,median)
mu_star=mean(Tbst)
res=(Tbst-mu_star)^2
res=mean(res)
return(res)
}
x=rnorm(100)
X=rnorm(100)
varemp=function(x){(length(x)-1)*var(x)/length(x)}
bootstrap_biais= function(x,L){
bootstraped_stat=c()
matrix_Bech=replicate(L,bootstrap_ech(x))
#calcul de la statistique VARIANCE sur chaque B_ech
bootstraped_stat=apply(matrix_Bech,1,median)
res=mean(bootstraped_stat)-median(x)
}
bootstrap_var= function(x,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_ech,1,median)
mu_star=mean(Tbst)
res=(Tbst-mu_star)^2
res=mean(res)
return(res)
}
bootstrap_QR= function(x,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_ech,1,median)
res=mean((Tbst-median(x))^2)
return(res)
}
bootstrap_QR(X,100)
#  Fonction de création d'un échantillon bootstrap
bootstrap_ech=function(ech){
u=sample(1:length(ech), length(ech), replace = TRUE)
B_ech=ech[u]
return(B_ech)
}
bootstrap_QR(X,100)
bootstrap_QR(X,100)
bootstrap_ech=function(ech){
u=sample(1:length(ech), length(ech), replace = TRUE)
B_ech=ech[u]
return(B_ech)
}
bootstrap_QR(X,100)
bootstrap_QR= function(x,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_ech,1,median)
res=mean((Tbst-median(x))^2)
return(res)
}
X=rnorm(100)
bootstrap_QR(X,100)
bootstrap_QR(X,100)
bootstrap_biais= function(x,L){
bootstraped_stat=c()
matrix_Bech=replicate(L,bootstrap_ech(x))
#calcul de la statistique VARIANCE sur chaque B_ech
bootstraped_stat=apply(matrix_Bech,1,median)
res=mean(bootstraped_stat)-median(x)
}
bootstrap_var= function(x,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_ech,1,median)
mu_star=mean(Tbst)
res=(Tbst-mu_star)^2
res=mean(res)
return(res)
}
bootstrap_QR= function(x,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_ech,1,median)
res=mean((Tbst-median(x))^2)
return(res)
}
X=rnorm(100)
bootstrap_QR(X,100)
bootstrap_biais(X,100)
bootstrap_biais(X,100)
bootstrap_biais(X,100)
bootstrap_QR(X,100)
bootstrap_var(X,100)
bootstrap_biais(X,100)
bootstrap_biais(X,100)
bootstrap_biais= function(x,L){
bootstraped_stat=c()
matrix_Bech=replicate(L,bootstrap_ech(x))
#calcul de la statistique VARIANCE sur chaque B_ech
bootstraped_stat=apply(matrix_Bech,1,median)
res=mean(bootstraped_stat)-median(x)
return(res)
}
bootstrap_var= function(x,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_ech,1,median)
mu_star=mean(Tbst)
res=(Tbst-mu_star)^2
res=mean(res)
return(res)
}
bootstrap_QR= function(x,L){
matrix_ech=replicate(L,bootstrap_ech(x))
#calcul de la statistique MOYENNE EMPIRIQE sur chaque B_ech
Tbst=apply(matrix_ech,1,median)
res=mean((Tbst-median(x))^2)
return(res)
}
X=rnorm(100)
bootstrap_QR(X,100)
bootstrap_var(X,100)
bootstrap_biais(X,100)
bootstrap_biais(X,100)
bootstrap_biais(X,100)
bootstrap_biais(X,10000)
bootstrap_QR(X,10000)
bootstrap_var(X,10000)
bootstrap_biais(X,10000)
bootstrap_QR(X,10000)
bootstrap_QR(X,1000000)
bootstrap_QR(X,10000)
library(boot)
data=aircondit
getwd()
Pokemon <- read.csv("~/Documents/School/CoursAlainMom/Datasets/Pokemon.csv", header=FALSE)
View(Pokemon)
View(Pokemon)
Pokemon <- read.csv("~/Documents/School/CoursAlainMom/Datasets/Pokemon.csv")
View(Pokemon)
View(Pokemon)
Pokemon[,Pokemon$ID]
Pokemon[Pokemon$ID]
Pokemon[Pokemon$ID,]
warnings()
warnings()
warning
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::tlmgr_update()
tinytex
tinytex::reinstall_tinytex()
options(tinytex.verbose = TRUE)
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
tinytex
tinytex::tlmgr_update()
tlmgr update --all --self
warnings()
warnings()
tlmgr update --all
tinytex::tlmgr_update()
tinytex::tlmgr_update()
install.packages('tinytex')
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::tinytex_root()
tinytex::latexmk()
getwd()
getwd()
~/
getAnywhere(~/)
getAnywhere(~)
getAnywhere(homme)
getAnywhere(home)
getwd()
getwd(~)
getwd(~/)
getwd()
getwd()
getwd()
setwd()
setwd("~/Documents/School/Econometrie/pap/Own_latex")
